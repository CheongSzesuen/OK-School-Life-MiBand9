<template>
	<div class="container">
		<!-- 顶部容器 -->
		<div class="header">
			<image
				class="back-btn"
				src="../../common/assets/backButton/backButton.png"
				onclick="backToindex"
			></image>
		</div>

		<!-- 主内容区域 -->
		<div class="main-area">
			<!-- 加载状态 -->
			<div class="loading-state" if="{{ isLoading }}">
				<text class="loading-text">加载中...</text>
			</div>

			<!-- 成就列表 -->
			<div class="achievement-content" if="{{ !isLoading }}">
				<list class="achievement-list">
					<list-item
						for="{{ achievements }}"
						class="achievement-item"
						type="achievement-item"
					>
						<text class="achievement-text">{{ $item }}</text>
					</list-item>
					<list-item
						if="{{ achievements.length === 0 }}"
						class="empty-state"
						type="empty-item"
					>
						<text class="empty-text">暂无成就</text>
					</list-item>
				</list>
			</div>
		</div>

		<!-- 底部区域 -->
		<div class="footer">
			<image
				class="delete-btn"
				src="../../common/assets/deleteButton/deleteButton.png"
				onclick="clearAchievements"
			></image>
		</div>
	</div>
</template>

<script>
import router from "@system.router";
import storage from "@system.storage";
import prompt from "@system.prompt";
import eventsData from "../../common/data/events.json";

export default {
	private: {
		achievements: [],
		isLoading: true,
		achievementMap: {},
		version: "",
		name: "",
	},

	onInit() {
		if (this.$page && this.$page.param) {
			this.version = this.$page.param.version || "";
			this.name = this.$page.param.name || "";
		}
		this.initAchievementMap();
		this.loadAchievements();
	},

	initAchievementMap() {
		const map = {};

		// 处理固定事件
		for (const groupKey in eventsData.events) {
			const group = eventsData.events[groupKey];
			group.forEach((event) => {
				if (event.achievements) {
					for (const choiceKey in event.achievements) {
						const key = `${event.id}_${choiceKey}`;
						const achievement = event.achievements[choiceKey];
						map[key] = Array.isArray(achievement)
							? achievement.join("、")
							: achievement;
					}
				}
			});
		}

		// 处理随机事件
		eventsData.random_events.forEach((event) => {
			if (event.achievements) {
				for (const choiceKey in event.achievements) {
					const key = `${event.id}_${choiceKey}`;
					const achievement = event.achievements[choiceKey];
					map[key] = Array.isArray(achievement)
						? achievement.join("、")
						: achievement;
				}
			}
		});

		this.achievementMap = map;
	},

	loadAchievements() {
		this.isLoading = true;

		storage.get({
			key: "achievements",
			success: (data) => {
				if (data) {
					try {
						const achievedKeys = JSON.parse(data);
						this.processAchievements(achievedKeys);
					} catch (e) {
						console.error("成就数据解析失败", e);
						prompt.showToast({ message: "成就数据解析失败" });
						this.achievements = [];
					}
				} else {
					this.achievements = [];
				}
				this.isLoading = false;
			},
			fail: (err, code) => {
				console.error(`成就加载失败，错误码：${code}`);
				prompt.showToast({ message: "加载成就失败" });
				this.achievements = [];
				this.isLoading = false;
			},
		});
	},

	processAchievements(achievedKeys) {
		const processed = [];
		achievedKeys.forEach((key) => {
			let name = this.achievementMap[key];

			if (!name && key.includes("_")) {
				const parts = key.split("_");
				if (parts.length >= 3) {
					const baseKey = `${parts[0]}_${parts[1]}`;
					name = this.achievementMap[baseKey];
				}
			}

			processed.push(name || key);
		});

		this.achievements = processed;
	},

	clearAchievements() {
		storage.set({
			key: "achievements",
			value: JSON.stringify([]),
			success: () => {
				this.achievements = [];
				prompt.showToast({
					message: "成就已清除",
					backgroundColor: "#53A47A",
					textColor: "#E8F3F5",
					borderRadius: 12,
					duration: 2000,
				});
			},
			fail: (err, code) => {
				console.error(`清除成就失败，错误码：${code}`);
				prompt.showToast({
					message: "清除失败",
					backgroundColor: "#90CA97",
					textColor: "#3A3F7C",
					borderRadius: 12,
					duration: 2000,
				});
			},
		});
	},

	backToindex() {
		router.replace({
			uri: "pages/index",
			params: {
				version: this.version,
			},
		});
	},
};
</script>

<style>
/* 基础容器样式 */
.container {
	flex-direction: column;
	align-items: center;
	justify-content: space-between;
	width: 100%;
	height: 100%;
	min-width: 336px;
	min-height: 480px;
	background-color: #1a2e22;
	padding: 0;
}

/* 头部区域 - 修改为垂直布局 */
.header {
	width: 100%;
	height: 180px;
	flex-direction: row;
	align-items: center;
	justify-content: center;
	padding-top: 10px;
}

/* 返回按钮图片 */
.back-btn {
	width: 180px;
	height: 180px;
	margin-bottom: 10px;
}

/* 标题样式 - 增大字号 */
.title {
	font-size: 48px;
	color: #f8f8ff;
	font-weight: bold;
	text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
	margin-top: 10px;
}

/* 主内容区域 */
.main-area {
	width: 90%;
	flex-grow: 1;
	background-color: rgba(232, 243, 245, 0.1);
	border-radius: 40px;
	margin: 15px 0;
	padding: 20px;
	justify-content: flex-start;
}

/* 加载状态 */
.loading-state {
	width: 100%;
	height: 100%;
	justify-content: center;
	align-items: center;
}

.loading-text {
	font-size: 32px;
	color: #b4ffba;
}

/* 成就列表 */
.achievement-list {
	width: 100%;
	height: 100%;
	flex-direction: column;
}

/* 成就项样式 */
.achievement-item {
	width: 100%;
	height: 140px;
	margin: 10px 0;
	border-radius: 40px;
	background-color: #69ba83;
	justify-content: center;
	align-items: center;
	padding: 10px 20px;
	box-shadow: 0 5px 15px rgba(83, 164, 122, 0.4);
}

/* 成就文本 - 增大到46px */
.achievement-text {
	font-size: 46px;
	color: #fff;
	font-weight: bold;
	text-align: center;
	word-break: break-word;
	width: 100%;
}

/* 空状态样式 */
.empty-state {
	width: 100%;
	height: 140px;
	justify-content: center;
	align-items: center;
}

/* 空状态文本 - 增大字号 */
.empty-text {
	font-size: 42px;
	color: #c8ffe8;
	text-align: center;
	font-weight: 500;
}

/* 底部区域 */
.footer {
	width: 100%;
	height: 180px;
	flex-direction: row;
	align-items: center;
	justify-content: center;
	padding-bottom: 10px;
}

/* 删除按钮图片 */
.delete-btn {
	width: 180px;
	height: 180px;
}
</style>

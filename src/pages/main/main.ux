<template>
	<div class="container">
		<!-- 顶部容器 -->
		<div class="header">
			<image class="back-btn" src="../../common/assets/backButton/backButton.png" onclick="backToindex"></image>
		</div>

		<!-- 主内容区域 -->
		<div class="main-area">
			<text class="question" if="{{currentQuestion}}">
				{{ currentQuestion }}
			</text>

			<!-- 内容区域 - 优化布局 -->
			<div class="content-area">
				<!-- 选项列表 - 统一DOM结构 -->
				<list class="options-list" if="{{showOptions}}">
					<list-item for="{{options}}" class="btn" type="option-item" onclick="onOptionClick($item.key)">
						<div class="btn-content">
							<marquee class="btn-marquee" scrollamount="25" loop="-1">
								{{ $item.text }}
							</marquee>
						</div>
					</list-item>
					<list-item if="{{!options || options.length === 0}}" class="error-hint" type="error-item">
						<div class="btn-content">
							<text>暂无有效选项</text>
						</div>
					</list-item>
				</list>

				<!-- 结果区域 -->
				<div class="result-container" if="{{showResult}}">
					<text class="result">{{ resultText }}</text>
					<div class="achievement-box" if="{{achievementText}}">
						<text class="achievement">{{ achievementText }}</text>
					</div>
					<div class="continue-btn" onclick="onContinue">
						<text class="btn-text">继续</text>
					</div>
				</div>
			</div>
		</div>

		<!-- 底部区域 -->
		<div class="footer">
			<image class="detail-btn" src="../../common/assets/detailButton/detailButton.png" onclick="goToAbout"></image>
		</div>
	</div>
</template>

<script>
import router from "@system.router";
import storage from "@system.storage";
import eventsData from "../../common/data/events.json";

export default {
	private: {
		questionIdx: 0,
		currentQuestion: "",
		options: [],
		resultText: "",
		achievementText: "",
		showOptions: true,
		showResult: false,
		eventsData: {},
		groupKey: "",
		eventIdx: 0,
		usedRandomEvents: [],
		stage: "choose_school",
		currentEvent: null,
		currentRandomIdx: -1,
		school: "",
		achievedList: [],
		achievementMap: {},
		version: "",
	},

	onInit() {
		if (this.$page && this.$page.param) {
			this.version = this.$page.param.version || "";
			this.name = this.$page.param.name || "";
		}

		this.stage = "choose_school";
		this.usedRandomEvents = [];
		this.eventIdx = 0;
		this.eventsData = eventsData;
		this.loadAchievements();
		this.showChooseSchool();
	},

	loadAchievements() {
		storage.get({
			key: "achievements",
			success: (data) => {
				if (data) {
					try {
						this.achievedList = JSON.parse(data) || [];
						this.achievementMap = this.achievedList.reduce((map, key) => {
							map[key] = true;
							return map;
						}, {});
					} catch (e) {
						console.error("成就数据解析失败", e);
					}
				}
			},
			fail: (err, code) => {
				console.error(`成就加载失败，错误码：${code}`);
			},
		});
	},

	saveAchievement(eventId, choiceKey) {
		const isRandom = eventId.startsWith("random");
		const achievementKey = isRandom
			? `random_${eventId.split("_")[1]}_${choiceKey}`
			: `event_${eventId.split("_")[1]}_${eventId.split("_")[2]}_${choiceKey}`;

		if (this.achievementMap[achievementKey]) {
			return false;
		}

		this.achievedList.push(achievementKey);
		this.achievementMap[achievementKey] = true;

		storage.set({
			key: "achievements",
			value: JSON.stringify(this.achievedList),
			success: () => {
				this.$app.$def.achievementUpdated = true;
			},
			fail: (err, code) => {
				console.error(`成就保存失败，错误码：${code}`);
				this.achievedList.pop();
				delete this.achievementMap[achievementKey];
			},
		});
		return true;
	},

	showChooseSchool() {
		this.stage = "choose_school";
		this.currentQuestion = "请选择你的入学学校：";
		this.options = [
			{ key: "1", text: "羊县中学", group: "group_1" },
			{ key: "2", text: "闪西省汗忠中学", group: "group_2" },
			{ key: "3", text: "汗忠市龙港高级中学", group: "group_3" },
		];
		this.showOptions = true;
		this.showResult = false;
	},

	onOptionClick(key) {
		if (!key) return;

		if (this.stage === "choose_school") {
			const selectedOption = this.options.find((opt) => opt.key === key);
			this.school = selectedOption.text;
			this.groupKey = selectedOption.group;
			this.eventIdx = 0;
			this.stage = "fixed_event";
			this.showFixedEvent();
		} else if (this.stage === "fixed_event") {
			this.handleFixedChoice(key);
		} else if (this.stage === "random_event") {
			this.handleRandomChoice(key);
		}
	},

	showFixedEvent() {
		const group = this.eventsData.events[this.groupKey] || [];

		if (this.eventIdx < group.length) {
			const event = group[this.eventIdx];
			this.currentEvent = event;
			this.currentQuestion = event.question.replace(/^>>>/, "");

			this.options = [];
			for (const choiceKey in event.choices) {
				this.options.push({
					key: choiceKey,
					text: event.choices[choiceKey],
				});
			}

			this.showOptions = true;
			this.showResult = false;
		} else {
			this.stage = "random_event";
			this.showRandomEvent();
		}
	},

	handleFixedChoice(key) {
		if (!this.currentEvent) return;

		const event = this.currentEvent;
		let result = event.results[key] || "";

		if (Array.isArray(result)) {
			const rand = Math.random();
			let cumulativeProb = 0;
			for (const item of result) {
				cumulativeProb += item.prob || 0;
				if (rand <= cumulativeProb) {
					result = item.text;
					if (item.end_game) {
						this.stage = "end";
					}
					break;
				}
			}
		}

		this.resultText = result;

		if (event.achievements && event.achievements[key]) {
			const achievement = event.achievements[key];
			const isNew = this.saveAchievement(event.id, key);
			const achievementStr = Array.isArray(achievement)
				? achievement.join("、")
				: achievement;

			this.achievementText = `获得成就：${achievementStr}${
				isNew ? "" : " (已获得)"
			}`;
		} else {
			this.achievementText = "";
		}

		this.showOptions = false;
		this.showResult = true;

		if (event.end_game_choices && event.end_game_choices.includes(key)) {
			this.stage = "end";
		}
	},

	onContinue() {
		if (this.stage === "end") {
			this.routeBack();
		} else if (this.stage === "fixed_event") {
			this.eventIdx += 1;
			this.showFixedEvent();
		} else if (this.stage === "random_event") {
			this.showRandomEvent();
		}
	},

	showRandomEvent() {
		const allRandom = this.eventsData.random_events || [];
		const available = allRandom.filter(
			(_, idx) => !this.usedRandomEvents.includes(idx)
		);

		if (available.length === 0) {
			this.currentQuestion = "";
			this.resultText = "所有事件已完成！";
			this.showOptions = false;
			this.showResult = true;
			this.stage = "end";
			return;
		}

		const randomIndex = Math.floor(Math.random() * available.length);
		const event = available[randomIndex];
		this.currentRandomIdx = allRandom.indexOf(event);
		this.currentEvent = event;
		this.currentQuestion = event.question.replace(/^>>>/, "");

		this.options = [];
		for (const choiceKey in event.choices) {
			this.options.push({
				key: choiceKey,
				text: event.choices[choiceKey],
			});
		}

		this.showOptions = true;
		this.showResult = false;
	},

	handleRandomChoice(key) {
		if (!this.currentEvent) return;

		const event = this.currentEvent;
		let result = event.results[key] || "";

		if (Array.isArray(result)) {
			const rand = Math.random();
			let cumulativeProb = 0;
			for (const item of result) {
				cumulativeProb += item.prob || 0;
				if (rand <= cumulativeProb) {
					result = item.text;
					if (item.end_game) {
						this.stage = "end";
					}
					break;
				}
			}
		}

		this.resultText = result;

		if (event.achievements && event.achievements[key]) {
			const achievement = event.achievements[key];
			const isNew = this.saveAchievement(event.id, key);
			const achievementStr = Array.isArray(achievement)
				? achievement.join("、")
				: achievement;

			this.achievementText = `获得成就：${achievementStr}${
				isNew ? "" : " (已获得)"
			}`;
		} else {
			this.achievementText = "";
		}

		this.showOptions = false;
		this.showResult = true;
		this.usedRandomEvents.push(this.currentRandomIdx);

		if (event.end_game_choices && event.end_game_choices.includes(key)) {
			this.stage = "end";
		}
	},

	backToindex() {
		storage.get({
			key: "achievements",
			success: (data) => {
				router.replace({
					uri: "pages/index",
					params: {
						achievements: data || "[]",
						version: this.version,
					},
				});
			},
			fail: () => {
				router.replace({
					uri: "pages/index",
					params: {
						achievements: "[]",
						version: this.version,
					},
				});
			},
		});
	},

	routeBack() {
		this.backToindex();
	},

	goToAbout() {
		router.push({
			uri: "pages/about",
			params: {
				version: this.version,
			},
		});
	},
};
</script>

<style>
/* 基础容器样式 */
.container {
	flex-direction: column;
	align-items: center;
	justify-content: space-between;
	width: 100%;
	height: 100%;
	min-width: 336px;
	min-height: 480px;
	background-color: #1a2e22;
	padding: 0;
}

/* 头部区域 */
.header {
	width: 100%;
	height: 180px;
	flex-direction: row;
	align-items: center;
	justify-content: center;
	padding-top: 10px;
}

/* 主内容区域 - 优化布局 */
.main-area {
	width: 90%;
	flex-grow: 1;
	background-color: rgba(232, 243, 245, 0.1);
	flex-direction: column;
	align-items: center;
	border-radius: 40px;
	margin: 10px 0;
	padding: 15px;
	justify-content: flex-start;
}

/* 问题文本 - 显著增大字号 */
.question {
	font-size: 52px;
	color: #f8f8ff;
	text-align: center;
	margin: 8px 0 20px 0;
	padding: 0 5%;
	line-height: 56px;
	font-weight: bold;
	word-break: break-word;
	text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

/* 内容区域 - 关键优化 */
.content-area {
	width: 100%;
	flex-grow: 1;
	flex-direction: column;
	align-items: center;
	justify-content: flex-start;
}

/* 选项列表 - 关键优化 */
.options-list {
	width: 100%;
	flex-grow: 1;
	flex-direction: column;
	align-items: center;
	overflow-y: auto;
	padding: 5px 0;
}

/* 按钮样式 - 增大高度 */
.btn {
	width: 100%;
	height: 140px;
	margin: 10px 0;
	border-radius: 40px;
	background-color: #69ba83;
	justify-content: center;
	align-items: center;
	padding: 5px 0;
	overflow: hidden;
	box-shadow: 0 5px 15px rgba(83, 164, 122, 0.4);
}

/* 按钮内容容器 */
.btn-content {
	width: 100%;
	height: 100%;
	justify-content: center;
	align-items: center;
}

/* 跑马灯样式 */
.btn-marquee {
	width: 90%;
	height: 100%;
	color: #fff;
	font-size: 46px;
	font-weight: bold;
	letter-spacing: 1.5px;
	text-shadow: 0 2px 3px rgba(0, 0, 0, 0.3);
	text-align: center;
	word-break: break-word;
	padding: 10px 0;
}

/* 列表项样式 */
list-item {
	width: 100%;
	height: 140px;
}

/* 错误提示 - 增大字号 */
.error-hint {
	color: #ff7e7e;
	text-align: center;
	margin-top: 16px;
	font-size: 26px;
}

/* 结果容器 - 调整高度 */
.result-container {
	width: 100%;
	flex-direction: column;
	align-items: center;
	justify-content: flex-start;
	padding: 15px 0;
	margin-top: 10px;
	border-radius: 20px;
	background-color: rgba(109, 139, 140, 0.2);
}

/* 结果文本 - 增大字号和行高 */
.result {
	font-size: 44px;
	color: #b4ffba;
	text-align: center;
	padding: 0 16px;
	margin-bottom: 20px;
	line-height: 52px;
	word-break: break-all;
}

/* 成就容器 */
.achievement-box {
	width: 95%;
	padding: 20px;
	margin: 15px 0;
	background-color: rgba(200, 255, 232, 0.1);
	border-radius: 20px;
	justify-content: center;
	align-items: center;
}

/* 成就提示 - 增大字号和调整布局 */
.achievement {
	font-size: 40px;
	color: #c8ffe8;
	text-align: center;
	line-height: 48px;
	font-weight: 500;
	word-break: break-word;
}

/* 继续按钮 - 优化样式 */
.continue-btn {
	width: 100%;
	height: 140px;
	margin-top: 25px;
	border-radius: 40px;
	background-color: #69ba83;
	justify-content: center;
	align-items: center;
	padding: 10px 0;
	overflow: hidden;
	box-shadow: 0 5px 15px rgba(83, 164, 122, 0.4);
}

/* 按钮文字样式 - 增大字号 */
.btn-text {
	font-size: 46px;
	color: #fff;
	font-weight: bold;
	letter-spacing: 1.5px;
	text-shadow: 0 2px 3px rgba(0, 0, 0, 0.3);
	width: 100%;
	text-align: center;
	word-break: break-word;
	padding: 5px 0;
}
/* 底部区域 */
.footer {
	width: 100%;
	height: 180px;
	flex-direction: row;
	align-items: center;
	justify-content: center;
	padding-bottom: 10px;
}

/* 返回按钮图片 */
.back-btn {
	width: 180px;
	height: 180px;
}

/* 详情按钮图片 */
.detail-btn {
	width: 180px;
	height: 180px;
}
</style>